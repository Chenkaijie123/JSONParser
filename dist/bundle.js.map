{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/JSONParser/JSONParser.ts","webpack:///./src/JSONParser/Token.ts","webpack:///./src/JSONParser/TokenParser.ts","webpack:///./src/JSONParser/Tokenizer.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import TokenParser from \"./TokenParser\";\r\nimport Tokenizer from \"./Tokenizer\";\r\n\r\nexport default class JSONParser{\r\n    private TokenParser:TokenParser\r\n    private Tokenizer:Tokenizer\r\n\r\n    static get ins():JSONParser{\r\n        if(!this[\"_ins\"]) this[\"_ins\"] = new JSONParser();\r\n        return this[\"_ins\"];\r\n    }\r\n    constructor(){\r\n        this.TokenParser = new TokenParser()\r\n        this.Tokenizer = new Tokenizer()\r\n    } \r\n    static parse(input:string):Object{\r\n        return JSONParser.ins.TokenParser.parse(JSONParser.ins.Tokenizer.read(input))\r\n\r\n    }\r\n}","export default class Token{\r\n    type:TokenType\r\n    value:any\r\n    static create(type:TokenType,value:any):Token{\r\n        let token = new Token()\r\n        token.type = type;\r\n        token.value = value;\r\n        return token\r\n    }\r\n}\r\n\r\nexport enum TokenType{\r\n    Big_brackets,// {}\r\n    Mid_Brackets,//[]\r\n    colon,//:\r\n    Quotation,//\"\"\r\n    Number,\r\n    String,\r\n    equal,\r\n    Name,\r\n    Comma,\r\n}","import Token, { TokenType } from \"./Token\";\r\n\r\nexport default class TokenParser {\r\n    parse(tokens: Token[]): object {\r\n        //当前token流执行到的位置\r\n        let currentIndex = 0;\r\n        //当前的token\r\n        let token: Token\r\n        //栈数据结构，会根据token流逐一创建对象，永远操作最后一位对象\r\n        let stack = [];\r\n        //模拟指针\r\n        let point: object;\r\n        //token类型\r\n        let type: TokenType\r\n        //token的value\r\n        let value: any\r\n        let propName: string//属性名\r\n        //标志下一个token否是对象的值，包括对象的value值和数组的元素\r\n        let isValue = false\r\n        while (token = tokens[currentIndex++]) {\r\n            type = token.type\r\n            value = token.value\r\n            switch (type) {\r\n                case TokenType.Big_brackets:\r\n                    //出现左大括号，创建对象\r\n                    if (token.value == \"{\") {\r\n                        point = {}\r\n                        if (isValue) {\r\n                            //获取该对象的父节点（如果有）\r\n                            let par = stack[stack.length - 1]\r\n                            if (par && par instanceof Array) par.push(point)\r\n                            else if (par && par instanceof Object) {\r\n                                par[propName] = point;\r\n                            }\r\n\r\n                        }\r\n                        // 该元素推入堆栈\r\n                        stack.push(point)\r\n                    } else {\r\n                        //出现闭合大括号表示当前对象创建完成，从队列中删除\r\n                        stack.pop();\r\n                        if (stack.length)\r\n                            point = stack[stack.length - 1]\r\n                            if(point instanceof Array) isValue = true\r\n                    }\r\n                    break\r\n                case TokenType.Mid_Brackets:\r\n                    //出现左中括号创建数组\r\n                    if (token.value === \"[\") {\r\n                        point = []\r\n                        if (isValue) {\r\n                            let par = stack[stack.length - 1]\r\n                            if (par && par instanceof Array) par.push(point)\r\n                            else if (par && par instanceof Object) {\r\n                                par[propName] = point;\r\n                            }\r\n                        }\r\n                        stack.push(point)\r\n                    } else {\r\n                        //出现右中括号表示数组创建完成，从工作队列中移除\r\n                        stack.pop();\r\n                        if (stack.length)\r\n                            point = stack[stack.length - 1]\r\n                            if(point instanceof Array) isValue = true\r\n                    }\r\n                    break;\r\n                case TokenType.Comma:\r\n                    break;\r\n                case TokenType.Name:\r\n                    propName = value;\r\n                    break;\r\n                case TokenType.Number:\r\n                    if (isValue) {\r\n                        point[propName] = value;\r\n                        isValue = false\r\n                    }\r\n                    break\r\n                case TokenType.Quotation:\r\n                    throw new Error(\"parsing type error!\")\r\n                case TokenType.String:\r\n                    if (isValue) {\r\n                        point[propName] = value;\r\n                        isValue = false\r\n                    } else {\r\n                        propName = value;\r\n                    }\r\n                    break;\r\n                case TokenType.colon:\r\n                case TokenType.equal:\r\n                    isValue = true;\r\n                    break\r\n            }\r\n        }\r\n        return point;\r\n    }\r\n\r\n}","import Token, { TokenType } from \"./Token\";\r\n// {\r\n//     name:\"bob\";\r\n//     age:12\r\n// }\r\nexport default class Tokenizer {\r\n    private NumberRegExp = /[0-9]/\r\n    private spaceRegExp = /\\s|\\n/\r\n    private nameRegExp = /[a-z]/i\r\n    read(input: string): Token[] {\r\n        //当前下标\r\n        let currentIndex: number = 0;\r\n        //解析成的token流\r\n        let tokens: Token[] = [];\r\n        let char: string;\r\n        while (char = input[currentIndex++]) {\r\n            //去空格\r\n            if(this.spaceRegExp.test(char)){\r\n                continue;\r\n            }\r\n            //读取大括号\r\n            if (char == \"{\" || char == \"}\") {\r\n                tokens.push(Token.create(TokenType.Big_brackets, char));\r\n                continue;\r\n            }\r\n\r\n            if (char === \"[\" || char === \"]\") {\r\n                tokens.push(Token.create(TokenType.Mid_Brackets, char));\r\n                continue;\r\n            }\r\n\r\n            // 读取冒号\r\n            if (char === \":\") {\r\n                tokens.push(Token.create(TokenType.colon, char));\r\n                continue;\r\n            }\r\n\r\n            //读取等号\r\n            if (char === \"=\") {\r\n                tokens.push(Token.create(TokenType.equal, char));\r\n                continue;\r\n            }\r\n\r\n            if(char === \",\"){\r\n                tokens.push(Token.create(TokenType.Comma, char));\r\n                continue;\r\n            }\r\n\r\n            //读取字符串\r\n            if (char == '\"') {\r\n                let key: string = \"\"\r\n                while (char = input[currentIndex]) {\r\n                    currentIndex++\r\n                    if(char == '\"') break;\r\n                    key += char;\r\n                }\r\n                tokens.push(Token.create(TokenType.String, key));\r\n                continue;\r\n            }\r\n\r\n            //读取数字\r\n            if (this.NumberRegExp.test(char)) {\r\n                let numberStr = char\r\n                while (this.NumberRegExp.test((char = input[currentIndex]))) {\r\n                    numberStr += char;\r\n                    currentIndex++\r\n                }\r\n                tokens.push(Token.create(TokenType.Number, +numberStr));\r\n                continue;\r\n            }\r\n\r\n            //读取属性名\r\n            if(this.nameRegExp.test(char)){\r\n                let name = char;\r\n                while(this.nameRegExp.test((char = input[currentIndex]))){\r\n                    name += char;\r\n                    currentIndex++\r\n                }\r\n                tokens.push(Token.create(TokenType.Name, name));\r\n                continue;\r\n            }\r\n\r\n\r\n            throw new Error(`type error,can not find ${char}`)\r\n        }\r\n        return tokens;\r\n    }\r\n}","\r\nimport JSONParser from \"./JSONParser/JSONParser\";\r\nlet a = `{\r\n    name:\"bob\",\r\n    age = \"12\",\r\n    args:[{test:1},{test:2},{id:2,arg:{name:\"arguments\"}}]\r\n}`\r\n\r\nlet obj = JSONParser.parse(a)\r\nconsole.log(obj)\r\n\r\n"],"sourceRoot":""}